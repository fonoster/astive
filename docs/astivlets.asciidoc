Astivlets
---------

An Astivlet is a small Java program that runs within an Astive Server. Astivlets, receive and respond to requests from telephone systems like Asterisk. All Astivlets, inherit from class +com.fonoster.astive.astivlet.Astivlet+. 

The parameter +AstivletRequest+ has information about the client invoking the Astivlet, such as host, caller id, context, ANI etc. In the other hand, AstivletResponse has a set of functions that can be use to control the call flow. The following "dialog" illustrates how an astivlet sends instruction to the channel:

* Asterisk ask the Astivlet what to do with the call
* Astivlet says: "Answer"
* Asterisk answers the call
* Astivlet tells Asterisk to play file "Hello World" to the user
* Asterisk plays file "Hello World" to the user
* Astivlet tells Asterisk to hang up the call
* Asterisk ends the call

An example of astovlet may look like:

[source,java]
public class App extends Astivlet {
    @Override
    public void service(AstivletRequest request, AstivletResponse response) {
        try {
            response.answer();
            response.streamFile("tt-monkeys");
            response.hangup();
        } catch (AgiException ex) {
           out.print(ex.getMessage());
        }
    }
}

TIP: The method _service_ acts as an entry point for your application.

URLs and Parameters
~~~~~~~~~~~~~~~~~~~

As we talk before in Chapter 5, contexts are the entry-points for FastAGI applications and, therefore, Astive applications. Those entry-points connect to a resource in Astive Server through URLs. Your entry point may look like:

....
[astive-context]
exten => 100,1,Agi(agi://127.0.0.1/HelloWorld)
....

Where +HelloWorld+ is a unique ID inside the Astive Server, and can be configured in the app.xml in Astives application. Arguments can be passed to an Astive application through the URL. To do so, add them as additional arguments to the +AGI()+ application, delimited by commas. An example of an URL with arguments may look like:

....
[astive-context]
exten => 100,1,Agi(agi://127.0.0.1/HelloWorld,arg1,arg2,arg3)
....

To retrieve the arguments you must use the function +getArguments()+. The getArguments() function will return an array of strings.

Another way to send parameters to your astivlet is via query strings; as in a web browser. Something like:

....
[astive-context]
exten => 100,1,Agi(agi://127.0.0.1/HelloWorld?myName=JaneDoe&b=2)
....

The following snippet is an example of how to retrieve parameters from the URL query strings.

[source,java]
public class App extends Astivlet {
    @Override
    public void service(AstivletRequest request, AstivletResponse response) {
        String myName = request.getQueryParameter("myName");
        String b = request.getQueryParameter("b");
    }
}
