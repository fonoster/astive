The AMI API
-----------

_Asterisk Manager Interface (AMI)_ is a control interface that operates in client / server mode over TCP and allows control and monitoring of various aspects of Asterisk. AMI allows actions such as originate calls or checks the status of users connected to the server. 

AMI will be disabled by default but can be enabled by changing it in the _manager.conf_ file. The default TCP port for AMI is +5038+. 

Clients can send commands or _ACTIONS_ to Asterisk server and read a _RESPONSE_ for that action. There are also _EVENTS_ which give detailed information about the state of Asterisk. Note that permissions to _write/read_ actions or responses are granted to users through the manager.conf. 

AMI has been beautifully wrapped in Java so you won't have to worry about the complexity of the protocol. All you need to do is login to the manager using Java classes send your commands and wait for events to get published. 

API Overview
~~~~~~~~~~~~

As I mentioned before, we have to add a user with the necessary permits to the _manager.conf_ before we can access the manager API. For this example we will use a generous set of permissions, but in real life you may want to be careful with this configuration.

....
[general]
enabled=yes
port=5038
bindaddr=192.168.0.12

[jhon]
secret=secretpass
permit=0.0.0.0/255.255.255.255
deny=0.0.0.0/0.0.0.0
read=system,call,log,verbose,command,agent,user
write=system,call,log,verbose,command,agent,user
....

In the following example, you will see how easy is to use the manager API. First, you gain access to the manager by using the IP address to machine hosting the Asterisk server, as well as the user and password using the _ManagerFactory_. Then you can attach the event listener to the manager so you can monitor all the events happening within the session. Finally send a SIP_PEERS_ACTION to get a list with all the peers connected to the Asterisk server. Our example may look like:

[source, java]
public static void main(String... args) {
  Manager manager = ManagerFactory.getInstance().create("192.168.0.12", "jhon", "secretpass");
  manager.addManagerEventListener(new ManagerEventListener() {
    public void handleEvent(ManagerEvent me) {
      out.println(me);  
    }
  })
  manager.sendAction(new SipPeersAction());
}

Supported Actions and Events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here is the list of the Actions and Events that Astive Toolkit support. If you find any *_Action_* or *_Event_* not in the list, please submit a report so we can added to the list.

Actions
^^^^^^^

You can also see this list in the Enum class _ActionTypeEnum.java_.

* WAIT_EVENT
* QUEUE_RESET
* QUEUE_RELOAD
* QUEUE_RULE
* QUEUE_PENALTY
* QUEUE_LOG
* QUEUE_PAUSE
* QUEUE_REMOVE
* QUEUE_ADD
* QUEUE_SUMMARY
* QUEUE_STATUS
* QUEUES
* AGENT_LOGOFF
* AGENTS
* IAX_REGISTRY
* IAX_NETSTATS
* IAX_PEER_LIST
* IAX_PEERS
* DAHDI_RESTART
* DAHDI_SHOW_CHANNELS
* DAHDID_ND_OFF
* DAHDID_ND_ON
* DAHDI_DIAL_OFF_HOOK
* DAHDI_HANGUP
* DAHDI_TRANSFER
* DATA_GET
* SIP_NOTIFY
* SIP_SHOW_REGISTRY
* SIP_QUALIFY_PEER
* SIP_SHOW_PEER
* SIP_PEERS
* VOICE_MAIL_USERS_LIST
* PLAY_DTMF
* SKINNY_SHOW_LINE
* SKINNY_LINES
* SKINNY_SHOW_DEVICE
* SKINNY_DEVICES
* MEETME_LIST
* MEETME_UNMUTE
* MEETME_MUTE
* MIX_MONITOR_MUTE
* UNPAUSE_MONITOR
* PAUSE_MONITOR
* CHANGE_MONITOR
* STOP_MONITOR
* MONITOR
* AGI
* AOC_MESSAGE
* JABBER_SEND
* DB_DEL_TREE
* DB_DEL
* DB_PUT
* DB_GET
* BRIDGE
* PARK
* PARKED_CALLS
* SHOW_DIAL_PLAN
* MODULE_CHECK
* MODULE_LOAD
* CORE_SHOW_CHANNELS
* RELOAD
* CORE_STATUS
* CORE_SETTINGS
* USER_EVENT
* UPDATE_CONFIG
* SEND_TEXT
* LIST_COMMANDS
* MAILBOX_COUNT
* MAILBOX_STATUS
* ABSOLUTE_TIMEOUT
* EXTENSION_STATE
* COMMAND
* ORIGINATE
* ATXFER
* REDIRECT
* LIST_CATEGORIES
* CREATE_CONFIG
* STATUS
* GET_CONFIG_JSON
* GET_CONFIG
* GETVAR
* SETVAR
* PING
* HANGUP
* CHALLENGE
* LOGIN
* LOGOFF
* LOCAL_OPTIMIZE_AWAY
* EVENTS

Events
^^^^^^

You can also see this list in the Enum class _EventTypeEnum.java_.

* ABSTRACT_PARKED_CALL
* ABSTRACT_QUEUE_MEMBER
* AGENT_CALLBACK_LOGIN
* AGENT_CALLBACK_LOGOFF
* AGENT_CALLED
* AGENT_COMPLETE
* AGENT_CONNECT
* AGENT_DUMP
* AGENT_LOGIN
* AGENT_LOGOFF
* AGENTS_COMPLETE
* AGENTS
* ALARM_CLEAR
* ALARM
* CDR
* CHANNEL
* CONNECT
* DBGET_RESPONSE
* DIAL,
* DISCONNECT
* DND_STATE
* EXTENSION_STATUS
* FAX_RECEIVED
* HANGUP
* HOLDED_CALL
* HOLD
* JOIN
* LEAVE
* LINK
* LOGCHANNELEVENT
* MANAGER
* MEET_ME
* MEET_ME_JOIN
* MEET_ME_LEAVE
* MEET_ME_STOP_TALKING
* MEET_ME_TALKING
* MESSAGE_WAITING
* NEW_CALLER_ID
* NEW_CHANNEL
* NEW_EXTEN
* NEW_STATE
* ORIGINATE
* ORIGINATE_FAILURE
* ORIGINATE_SUCCESS
* PARKED_CALL
* PARKED_CALL_GIVE_UP
* PARKED_CALLS_COMPLETE
* PARKED_CALL_TIMEOUT
* PEER_ENTRY
* PEERLIST_COMPLETE
* PEER_STATUS
* QUEUE_ENTRY
* QUEUE
* QUEUE_MEMBER
* QUEUE_MEMBER_PAUSED
* QUEUE_MEMBER_REMOVED
* QUEUE_MEMBER_STATUS
* QUEUE_PARAMS
* QUEUE_STATUS_COMPLETE
* REGISTRY
* RELOAD
* RENAME
* RESPONSE
* SHUTDOWN
* STATUS_COMPLETE
* STATUS
* UNHOLD
* UNLINK
* UNPARKED_CALL
* USER
* ZAP_SHOW_CHANNELS_COMPLETE
* ZAP_SHOW_CHANNELS
* UNKNOWN

